import React, { useState, useEffect, useContext } from "react";
import { db } from "../utils/firebase";
import { collection, addDoc, getDocs, deleteDoc, updateDoc, doc, orderBy, query, where, serverTimestamp, Timestamp } from "firebase/firestore";
import { AuthContext } from "../context/AuthContext"; // ‡πÉ‡∏ä‡πâ AuthContext ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role

const NutritionManagement = () => {
  const { userRole } = useContext(AuthContext); // ‡∏î‡∏∂‡∏á role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
  const [patients, setPatients] = useState([]);
  const [selectedPatient, setSelectedPatient] = useState("");
  const [selectedPatientName, setSelectedPatientName] = useState("");
  const [meal, setMeal] = useState("");
  const [allergy, setAllergy] = useState("");
  const [date, setDate] = useState("");
  const [time, setTime] = useState("");
  const [notes, setNotes] = useState("");
  const [nutritionData, setNutritionData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [editMeal, setEditMeal] = useState(null);
  const [showForm, setShowForm] = useState(false);

  useEffect(() => {
    const fetchPatients = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "patients"));
        const patientList = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setPatients(patientList);
      } catch (error) {
        console.error("üî• Error fetching patients:", error);
      }
    };

    fetchPatients();
  }, []);

  useEffect(() => {
    if (selectedPatient) {
      fetchMeals();
    } else {
      setNutritionData([]);
    }
  }, [selectedPatient]);

  const fetchMeals = async () => {
    setLoading(true);
    try {
      const q = query(
        collection(db, "meals"),
        where("patientId", "==", selectedPatient),
        orderBy("dateTime", "desc")
      );

      const querySnapshot = await getDocs(q);
      const meals = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      setNutritionData(meals);
    } catch (error) {
      console.error("‚ùå Error fetching meals: ", error);
    } finally {
      setLoading(false);
    }
  };

  const saveMeal = async () => {
    if (!selectedPatient || !meal || !date || !time) {
      alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }

    setLoading(true);
    try {
      const dateTime = Timestamp.fromDate(new Date(`${date}T${time}:00`));
      if (editMeal) {
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        const mealRef = doc(db, "meals", editMeal.id);
        await updateDoc(mealRef, { patientId: selectedPatient, patientName: selectedPatientName, meal, allergy, dateTime, notes });
        alert("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
        const docRef = await addDoc(collection(db, "meals"), {
          patientId: selectedPatient,
          patientName: selectedPatientName,
          meal,
          allergy,
          dateTime,
          notes,
          createdAt: serverTimestamp(),
        });
        setNutritionData([
          { id: docRef.id, patientId: selectedPatient, patientName: selectedPatientName, meal, allergy, dateTime, notes },
          ...nutritionData,
        ]);
        alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      resetForm();
      fetchMeals();
    } catch (error) {
      console.error("‚ùå Error saving meal: ", error);
    } finally {
      setLoading(false);
    }
  };

  const deleteMeal = async (id) => {
    if (window.confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ?")) {
      try {
        await deleteDoc(doc(db, "meals", id));
        setNutritionData(nutritionData.filter((meal) => meal.id !== id));
        alert("üóëÔ∏è ‡∏•‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } catch (error) {
        console.error("‚ùå Error deleting meal: ", error);
      }
    }
  };

  const editMealData = (mealData) => {
    setMeal(mealData.meal);
    setAllergy(mealData.allergy);
    setDate(mealData.dateTime.toDate().toISOString().split("T")[0]);
    setTime(mealData.dateTime.toDate().toISOString().split("T")[1].slice(0, 5));
    setNotes(mealData.notes);
    setEditMeal(mealData);
    setShowForm(true);
  };

  const resetForm = () => {
    setMeal("");
    setAllergy("");
    setDate("");
    setTime("");
    setNotes("");
    setEditMeal(null);
    setShowForm(false);
  };

  return (
    <div>
      <h3>üçΩÔ∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£</h3>

      <label>üë§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢:</label>
      <select
        value={selectedPatient}
        onChange={(e) => {
          const patientId = e.target.value;
          setSelectedPatient(patientId);
          const patientName = patients.find((p) => p.id === patientId)?.name || "";
          setSelectedPatientName(patientName);
        }}
      >
        <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
        {patients.map((patient) => (
          <option key={patient.id} value={patient.id}>
            {patient.name} (‡∏≠‡∏≤‡∏¢‡∏∏ {patient.age} ‡∏õ‡∏µ)
          </option>
        ))}
      </select>

      {(userRole === "admin" || userRole === "nutritionist" || userRole === "owner") && (
        <button onClick={() => setShowForm(true)}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£</button>
      )}

      {showForm && (
        <form onSubmit={(e) => { e.preventDefault(); saveMeal(); }}>
          <input type="text" placeholder="üçõ ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£" value={meal} onChange={(e) => setMeal(e.target.value)} />
          <input type="text" placeholder="üö® ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" value={allergy} onChange={(e) => setAllergy(e.target.value)} />
          <input type="date" value={date} onChange={(e) => setDate(e.target.value)} />
          <input type="time" value={time} onChange={(e) => setTime(e.target.value)} />
          <textarea placeholder="üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" value={notes} onChange={(e) => setNotes(e.target.value)}></textarea>
          <button type="submit">{editMeal ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£"}</button>
          <button type="button" onClick={resetForm}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
        </form>
      )}

      <h4>üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á {selectedPatientName || "..."}</h4>
      {nutritionData.map((data) => (
        <div key={data.id}>
          <p>{data.meal} - {data.dateTime.toDate().toLocaleDateString()}</p>
          {(userRole === "admin" || userRole === "nutritionist" || userRole === "owner") && (
            <>
              <button onClick={() => editMealData(data)}>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
              <button onClick={() => deleteMeal(data.id)}>üóëÔ∏è ‡∏•‡∏ö</button>
            </>
          )}
        </div>
      ))}
    </div>
  );
};

export default NutritionManagement;
