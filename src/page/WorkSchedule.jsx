import React, { useState, useEffect } from "react";
import { db, auth } from "../utils/firebase";
import { collection, addDoc, getDocs, deleteDoc, doc, query, where, getDoc } from "firebase/firestore";

const WorkSchedule = () => {
  const [staffList, setStaffList] = useState([]); // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  const [staffName, setStaffName] = useState(""); // ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [shift, setShift] = useState("");
  const [date, setDate] = useState("");
  const [branch, setBranch] = useState(""); // ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [schedules, setSchedules] = useState([]);
  const [branches, setBranches] = useState([]); // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const [loading, setLoading] = useState(false);
  const [selectedBranch, setSelectedBranch] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î `selectedBranch` ‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Firestore
  useEffect(() => {
    const fetchUserBranch = async () => {
      const user = auth.currentUser;
      if (user) {
        try {
          const userDoc = await getDoc(doc(db, "users", user.uid));
          if (userDoc.exists()) {
            setSelectedBranch(userDoc.data().selectedBranch || "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
          }
        } catch (error) {
          console.error("üî• Error fetching user branch:", error);
        }
      }
    };

    fetchUserBranch();
  }, []);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Firestore
  useEffect(() => {
    const fetchStaff = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "users"));
        const staffData = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setStaffList(staffData);
      } catch (error) {
        console.error("üî• Error fetching staff:", error);
      }
    };

    fetchStaff();
  }, []);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore
  useEffect(() => {
    const fetchBranches = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "branches"));
        const branchList = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setBranches(branchList);
      } catch (error) {
        console.error("üî• Error fetching branches:", error);
      }
    };

    fetchBranches();
  }, []);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  useEffect(() => {
    fetchSchedules();
  }, [selectedBranch]);

  const fetchSchedules = async () => {
    setLoading(true);
    try {
      let q = query(collection(db, "workSchedules"));

      // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
      if (selectedBranch !== "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") {
        q = query(q, where("branch", "==", selectedBranch));
      }

      const querySnapshot = await getDocs(q);
      const scheduleData = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));

      setSchedules(scheduleData);
    } catch (error) {
      console.error("Error fetching schedules:", error);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô
  const addSchedule = async () => {
    if (!staffName || !shift || !date || !branch) {
      alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    setLoading(true);
    try {
      await addDoc(collection(db, "workSchedules"), { staffName, shift, date, branch });
      alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setStaffName("");
      setShift("");
      setDate("");
      setBranch("");
      fetchSchedules();
    } catch (error) {
      console.error("Error adding schedule:", error);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô
  const deleteSchedule = async (id) => {
    if (window.confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ?")) {
      try {
        await deleteDoc(doc(db, "workSchedules", id));
        alert("üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        fetchSchedules();
      } catch (error) {
        console.error("Error deleting schedule:", error);
      }
    }
  };

  return (
    <div>


      {/* ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ */}
      <div>
        <label>üè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤: </label>
        <select value={selectedBranch} onChange={(e) => setSelectedBranch(e.target.value)}>
          <option value="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
          {branches.map((branch) => (
            <option key={branch.id} value={branch.id}>
              {branch.name}
            </option>
          ))}
        </select>
      </div>

      {/* ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô */}
      <form onSubmit={(e) => { e.preventDefault(); addSchedule(); }}>
        {/* ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å dropdown */}
        <label>üë§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:</label>
        <select value={staffName} onChange={(e) => setStaffName(e.target.value)}>
          <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô --</option>
          {staffList.map((staff) => (
            <option key={staff.id} value={staff.fullName}>
              {staff.fullName}
            </option>
          ))}
        </select>

        <input type="text" placeholder="‚è∞ ‡∏Å‡∏∞‡∏á‡∏≤‡∏ô" value={shift} onChange={(e) => setShift(e.target.value)} />
        <input type="date" value={date} onChange={(e) => setDate(e.target.value)} />

        {/* ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ */}
        <label>üè¢ ‡∏™‡∏≤‡∏Ç‡∏≤:</label>
        <select value={branch} onChange={(e) => setBranch(e.target.value)}>
          <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ --</option>
          {branches.map((b) => (
            <option key={b.id} value={b.id}>{b.name}</option>
          ))}
        </select>

        <button type="submit" disabled={loading}>{loading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°..." : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô"}</button>
      </form>

      {/* ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô */}
      <h3>üìå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
      <table border="1" cellPadding="10">
        <thead>
          <tr>
            <th>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th>üë§ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</th>
            <th>‚è∞ ‡∏Å‡∏∞‡∏á‡∏≤‡∏ô</th>
            <th>üè¢ ‡∏™‡∏≤‡∏Ç‡∏≤</th>
            <th>üõ†Ô∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {schedules.map((schedule) => (
            <tr key={schedule.id}>
              <td>{schedule.date}</td>
              <td>{schedule.staffName}</td>
              <td>{schedule.shift}</td>
              <td>{branches.find((b) => b.id === schedule.branch)?.name || "N/A"}</td>
              <td><button onClick={() => deleteSchedule(schedule.id)}>üóëÔ∏è</button></td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default WorkSchedule;
