import React, { useState, useEffect } from "react";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import { db } from "../utils/firebase";
import { collection, addDoc, getDocs, query, where, orderBy, doc, deleteDoc, updateDoc } from "firebase/firestore";
import { useParams } from "react-router-dom";
import "./style/MedicineSchedule.css";

const MedicineSchedule = () => {
  const { patientId } = useParams(); // ‡∏î‡∏∂‡∏á patientId ‡∏à‡∏≤‡∏Å URL
  const [medicineData, setMedicineData] = useState([]);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [loading, setLoading] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [selectedDayMedicines, setSelectedDayMedicines] = useState([]);
  const [editMedicine, setEditMedicine] = useState(null);
  const [newMedicine, setNewMedicine] = useState({
    medicineName: "",
    dosage: "",
    route: "Oral",
    date: "", // ‡πÉ‡∏ä‡πâ YYYY-MM-DD
    frequency: "",
    instructions: "",
    status: "Not Given",
  });

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
  useEffect(() => {
    fetchData();
  }, [patientId]);

  const fetchData = async () => {
    try {
      setLoading(true);
      const q = query(
        collection(db, "medicineSchedule"),
        where("patientId", "==", patientId),
        orderBy("date") // ‡πÉ‡∏ä‡πâ date ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
      );
      const querySnapshot = await getDocs(q);
      const fetchedData = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      console.log("üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore:", fetchedData);
      setMedicineData(fetchedData);
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
  const eventsByDate = medicineData.reduce((acc, curr) => {
    if (!curr.date) return acc;
    const eventDate = curr.date; // Firestore ‡πÉ‡∏ä‡πâ YYYY-MM-DD
    if (!acc[eventDate]) acc[eventDate] = [];
    acc[eventDate].push(curr);
    return acc;
  }, {});

  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤
  const handleDateClick = (date) => {
    const dateString = date.toISOString().split("T")[0]; // ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
    console.log("üìÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:", dateString);
    console.log("üìã ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ:", eventsByDate[dateString] || []);

    setSelectedDate(date);
    setSelectedDayMedicines(eventsByDate[dateString] || []);
    setShowModal(true);
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ Firestore
  const saveMedicineSchedule = async () => {
    if (!newMedicine.medicineName || !newMedicine.dosage || !newMedicine.date) {
      alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    try {
      setLoading(true);
      if (editMedicine) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
        const medicineRef = doc(db, "medicineSchedule", editMedicine.id);
        await updateDoc(medicineRef, newMedicine);
        alert("‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà
        await addDoc(collection(db, "medicineSchedule"), {
          ...newMedicine,
          patientId,
        });
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
      }

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤
      setNewMedicine({
        medicineName: "",
        dosage: "",
        route: "Oral",
        date: "",
        frequency: "",
        instructions: "",
        status: "Not Given",
      });

      setEditMedicine(null);
      fetchData(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ", error);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
  const deleteMedicine = async (id) => {
    if (window.confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?")) {
      try {
        await deleteDoc(doc(db, "medicineSchedule", id));
        alert("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        fetchData();
      } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ", error);
      }
    }
  };

  return (
    <div className="schedule-container">
      <h3 className="title">üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ</h3>

      {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô */}
      <Calendar 
        onClickDay={handleDateClick} 
        tileContent={({ date }) => eventsByDate[date.toISOString().split("T")[0]] ? <div className="calendar-dot"></div> : null} 
      />

      {/* ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏¢‡∏≤ */}
      <div className="medicine-form">
        <h4>{editMedicine ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤"}</h4>
        <input type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤" value={newMedicine.medicineName} onChange={(e) => setNewMedicine({ ...newMedicine, medicineName: e.target.value })} />
        <input type="text" placeholder="‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 500mg)" value={newMedicine.dosage} onChange={(e) => setNewMedicine({ ...newMedicine, dosage: e.target.value })} />
        <input type="text" placeholder="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)" value={newMedicine.frequency} onChange={(e) => setNewMedicine({ ...newMedicine, frequency: e.target.value })} />
        <input type="text" placeholder="‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©" value={newMedicine.instructions} onChange={(e) => setNewMedicine({ ...newMedicine, instructions: e.target.value })} />
        <input type="date" value={newMedicine.date} onChange={(e) => setNewMedicine({ ...newMedicine, date: e.target.value })} />
        <button onClick={saveMedicineSchedule} disabled={loading}>{loading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : editMedicine ? "üíæ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "üíä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤"}</button>
      </div>

      {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô */}
      {showModal && (
        <div className="modal">
          <div className="modal-content">
            <h4>üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {selectedDate.toISOString().split("T")[0]}</h4>
            <ul>
              {selectedDayMedicines.length > 0 ? selectedDayMedicines.map((med) => (
                <li key={med.id}>
                  {med.medicineName} - {med.dosage} ({med.status})
                  <button onClick={() => setEditMedicine(med)}>‚úèÔ∏è</button>
                  <button onClick={() => deleteMedicine(med.id)}>üóëÔ∏è</button>
                </li>
              )) : <p>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤</p>}
            </ul>
            <button className="close-btn" onClick={() => setShowModal(false)}>‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default MedicineSchedule;
