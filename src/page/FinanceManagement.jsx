import React, { useState, useEffect } from "react";
import { db } from "../utils/firebase";
import { collection, addDoc, getDocs, deleteDoc, updateDoc, doc, query, where } from "firebase/firestore";
import "./style/FinanceManagement.css";

const FinanceManagement = () => {
  const [transactions, setTransactions] = useState([]);
  const [type, setType] = useState("‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö");
  const [category, setCategory] = useState("");
  const [amount, setAmount] = useState("");
  const [description, setDescription] = useState("");
  const [date, setDate] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î");
  const [accountNumber, setAccountNumber] = useState(""); // ‚úÖ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  const [accountName, setAccountName] = useState(""); // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  const [bankName, setBankName] = useState(""); // ‚úÖ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
  const [status, setStatus] = useState("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const [loading, setLoading] = useState(false);
  const [editTransaction, setEditTransaction] = useState(null);

  useEffect(() => {
    fetchFinanceData();
  }, []);

  const fetchFinanceData = async () => {
    setLoading(true);
    try {
      const querySnapshot = await getDocs(collection(db, "finance"));
      setTransactions(querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
    } catch (error) {
      console.error("‚ùå Error fetching finance data: ", error);
    } finally {
      setLoading(false);
    }
  };

  const saveTransaction = async () => {
    if (!category || !amount || !date) {
      alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }

    setLoading(true);
    try {
      if (editTransaction) {
        const transactionRef = doc(db, "finance", editTransaction.id);
        await updateDoc(transactionRef, { type, category, amount, description, date, paymentMethod, accountNumber, accountName, bankName, status });
        alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        await addDoc(collection(db, "finance"), { type, category, amount, description, date, paymentMethod, accountNumber, accountName, bankName, status });
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
      resetForm();
      fetchFinanceData();
    } catch (error) {
      console.error("‚ùå Error saving finance data: ", error);
    } finally {
      setLoading(false);
    }
  };

  const deleteTransaction = async (id) => {
    if (window.confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?")) {
      try {
        await deleteDoc(doc(db, "finance", id));
        alert("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        fetchFinanceData();
      } catch (error) {
        console.error("‚ùå Error deleting finance data: ", error);
      }
    }
  };

  const updateStatus = async (id, newStatus) => {
    try {
      const transactionRef = doc(db, "finance", id);
      await updateDoc(transactionRef, { status: newStatus });
      setTransactions(transactions.map((t) => (t.id === id ? { ...t, status: newStatus } : t)));
    } catch (error) {
      console.error("‚ùå Error updating status: ", error);
    }
  };

  return (
    <div className="finance-container">
      <h3>üìä ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô</h3>

      {/* ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô */}
      <form onSubmit={(e) => { e.preventDefault(); saveTransaction(); }}>
        <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</label>
        <select value={type} onChange={(e) => setType(e.target.value)}>
          <option value="‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö">üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</option>
          <option value="‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢">üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</option>
        </select>

        <label>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</label>
        <input type="text" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£, ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" value={category} onChange={(e) => setCategory(e.target.value)} />

        <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</label>
        <input type="number" placeholder="‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" value={amount} onChange={(e) => setAmount(e.target.value)} />

        <label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</label>
        <textarea placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" value={description} onChange={(e) => setDescription(e.target.value)} />

        <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
        <input type="date" value={date} onChange={(e) => setDate(e.target.value)} />

        <label>üí≥ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</label>
        <select value={paymentMethod} onChange={(e) => setPaymentMethod(e.target.value)}>
          <option value="‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î">‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</option>
          <option value="‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£">‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</option>
          <option value="‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï">‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</option>
        </select>

        <label>üè¶ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</label>
        <input type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" value={bankName} onChange={(e) => setBankName(e.target.value)} />

        <label>üî¢ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</label>
        <input type="text" placeholder="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" value={accountNumber} onChange={(e) => setAccountNumber(e.target.value)} />

        <label>üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</label>
        <input type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" value={accountName} onChange={(e) => setAccountName(e.target.value)} />

        <button type="submit" disabled={loading}>
          {loading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : editTransaction ? "üíæ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "üì• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
        </button>
      </form>

      {/* ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° */}
      <h3>üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</h3>
      {transactions.length > 0 ? (
        <table>
          <thead>
            <tr>
              <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
              <th>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
              <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
              <th>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</th>
              <th>‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</th>
              <th>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</th>
              <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {transactions.map((t) => (
              <tr key={t.id}>
                <td>{t.type}</td>
                <td>{t.category}</td>
                <td>{t.amount}</td>
                <td>{t.date}</td>
                <td>{t.paymentMethod}</td>
                <td>{t.bankName || "-"}</td>
                <td>{t.accountNumber || "-"}</td>
                <td>{t.accountName || "-"}</td>
                <td>
                  <select value={t.status} onChange={(e) => updateStatus(t.id, e.target.value)}>
                    <option value="‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</option>
                    <option value="‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
                  </select>
                </td>
                <td><button onClick={() => deleteTransaction(t.id)}>üóëÔ∏è ‡∏•‡∏ö</button></td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <p>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô</p>
      )}
    </div>
  );
};

export default FinanceManagement;
