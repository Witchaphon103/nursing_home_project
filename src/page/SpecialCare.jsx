import React, { useState, useEffect, useCallback, useContext } from "react";
import { useParams } from "react-router-dom";
import { db } from "../utils/firebase";
import { AuthContext } from "../context/AuthContext"; // Import AuthContext
import {
  collection,
  addDoc,
  getDocs,
  query,
  where,
  doc,
  deleteDoc,
  updateDoc,
} from "firebase/firestore";
import "./style/SpecialCare.css";

const SpecialCare = () => {
  const { patientId } = useParams();
  const { userRole } = useContext(AuthContext); // ‡∏£‡∏±‡∏ö role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const [specialCareData, setSpecialCareData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [editCare, setEditCare] = useState(null);
  const [showForm, setShowForm] = useState(false);

  const defaultCareState = {
    careType: "",
    schedule: "",
    initialAssessment: "",
    carePlan: "",
  };

  const [newCare, setNewCare] = useState(defaultCareState);

  useEffect(() => {
    fetchSpecialCareData();
  }, [patientId]);

  const fetchSpecialCareData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const q = query(collection(db, "specialCare"), where("patientId", "==", patientId));
      const querySnapshot = await getDocs(q);
      setSpecialCareData(querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
    } catch (error) {
      console.error("‚ùå Error fetching data:", error);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    } finally {
      setLoading(false);
    }
  }, [patientId]);

  const saveSpecialCare = async () => {
    if (!newCare.careType || !newCare.schedule) {
      alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    setLoading(true);
    setError(null);
    try {
      if (editCare) {
        const careRef = doc(db, "specialCare", editCare.id);
        await updateDoc(careRef, newCare);
        alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        await addDoc(collection(db, "specialCare"), { ...newCare, patientId });
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }

      resetForm();
      fetchSpecialCareData();
    } catch (error) {
      console.error("‚ùå Error saving data:", error);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    } finally {
      setLoading(false);
    }
  };

  const deleteSpecialCare = async (id) => {
    if (window.confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ?")) {
      try {
        await deleteDoc(doc(db, "specialCare", id));
        alert("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        fetchSpecialCareData();
      } catch (error) {
        console.error("‚ùå Error deleting data:", error);
        setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      }
    }
  };

  const resetForm = () => {
    setNewCare(defaultCareState);
    setEditCare(null);
    setShowForm(false);
  };

  return (
    <div className="special-care-container">
      <h3 className="title">ü©∫ ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</h3>

      {error && <p className="error-message">‚ùå {error}</p>}

      {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏© (Owner, Admin, Staff ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) */}
      {(userRole === "owner" || userRole === "admin" || userRole === "staff") && !showForm && (
        <button className="add-btn" onClick={() => setShowForm(true)}>
          ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©
        </button>
      )}

      {showForm && (
        <div className="special-care-form">
          <h4>{editCare ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©" : "üì• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©"}</h4>
          <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•</label>
          <input
            type="text"
            value={newCare.careType}
            onChange={(e) => setNewCare({ ...newCare, careType: e.target.value })}
          />

          <label>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•</label>
          <input
            type="text"
            value={newCare.schedule}
            onChange={(e) => setNewCare({ ...newCare, schedule: e.target.value })}
          />

          <label>‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</label>
          <textarea
            value={newCare.initialAssessment}
            onChange={(e) => setNewCare({ ...newCare, initialAssessment: e.target.value })}
          />

          <label>‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•</label>
          <textarea
            value={newCare.carePlan}
            onChange={(e) => setNewCare({ ...newCare, carePlan: e.target.value })}
          />

          <button onClick={saveSpecialCare} disabled={loading}>
            {loading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : editCare ? "üíæ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
          </button>
          <button className="cancel-btn" onClick={resetForm}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
        </div>
      )}

      <div className="special-care-list">
        <h4>üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©</h4>
        {loading ? (
          <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        ) : specialCareData.length > 0 ? (
          <ul>
            {specialCareData.map((care) => (
              <li key={care.id}>
                <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•:</strong> {care.careType}</p>
                <p><strong>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£:</strong> {care.schedule}</p>
                <p><strong>ü©∫ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û:</strong> {care.initialAssessment || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
                <p><strong>üìã ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•:</strong> {care.carePlan || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>

                {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏•‡∏ö (Owner, Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) */}
                {(userRole === "owner" || userRole === "admin") && (
                  <>
                    <button
                      onClick={() => {
                        setEditCare(care);
                        setNewCare(care);
                        setShowForm(true);
                      }}
                    >
                      ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    </button>
                    <button onClick={() => deleteSpecialCare(care.id)}>üóëÔ∏è ‡∏•‡∏ö</button>
                  </>
                )}
              </li>
            ))}
          </ul>
        ) : (
          <p>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©</p>
        )}
      </div>
    </div>
  );
};

export default SpecialCare;
