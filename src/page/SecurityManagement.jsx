import React, { useState, useEffect } from "react";
import { db } from "../utils/firebase";
import { collection, addDoc, getDocs, deleteDoc, updateDoc, doc } from "firebase/firestore";
import "./style/SecurityManagement.css";

const SecurityManagement = () => {
  const [entryDetails, setEntryDetails] = useState("");
  const [entryType, setEntryType] = useState("р╣Ар╕Вр╣Йр╕▓");
  const [personName, setPersonName] = useState("");
  const [idNumber, setIdNumber] = useState("");
  const [vehicle, setVehicle] = useState("");
  const [securityLogs, setSecurityLogs] = useState([]);
  const [loading, setLoading] = useState(false);
  const [editEntry, setEditEntry] = useState(null);

  // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Firestore
  useEffect(() => {
    fetchSecurityLogs();
  }, []);

  const fetchSecurityLogs = async () => {
    setLoading(true);
    try {
      const querySnapshot = await getDocs(collection(db, "security"));
      setSecurityLogs(querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
    } catch (error) {
      console.error("Error fetching security logs: ", error);
    } finally {
      setLoading(false);
    }
  };

  // р╣Ар╕Юр╕┤р╣Ир╕бр╕лр╕гр╕╖р╕нр╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕нр╕нр╕Б
  const handleEntry = async () => {
    if (!personName.trim() || !idNumber.trim() || !entryDetails.trim()) {
      alert("тЪая╕П р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╣Йр╕Др╕гр╕Ъ");
      return;
    }

    setLoading(true);
    try {
      if (editEntry) {
        // р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕е
        await updateDoc(doc(db, "security", editEntry.id), {
          personName,
          idNumber,
          entryType,
          vehicle,
          entryDetails,
          timestamp: new Date().toISOString(),
        });
        alert("тЬЕ р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╣Ар╕гр╣Зр╕И");
      } else {
        // р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╕бр╣И
        await addDoc(collection(db, "security"), {
          personName,
          idNumber,
          entryType,
          vehicle,
          entryDetails,
          timestamp: new Date().toISOString(),
        });
        alert("тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╣Ар╕гр╣Зр╕И");
      }

      resetForm();
      fetchSecurityLogs();
    } catch (error) {
      console.error("Error recording entry: ", error);
    } finally {
      setLoading(false);
    }
  };

  // р╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е
  const removeEntry = async (id) => {
    if (window.confirm("тЪая╕П р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕зр╣Ир╕▓р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕╡р╣Й?")) {
      try {
        await deleteDoc(doc(db, "security", id));
        alert("ЁЯЧСя╕П р╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╣Ар╕гр╣Зр╕И");
        fetchSecurityLogs();
      } catch (error) {
        console.error("Error deleting entry: ", error);
      }
    }
  };

  // р╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕Яр╕нр╕гр╣Мр╕б
  const resetForm = () => {
    setEntryDetails("");
    setEntryType("р╣Ар╕Вр╣Йр╕▓");
    setPersonName("");
    setIdNumber("");
    setVehicle("");
    setEditEntry(null);
  };

  return (
    <div className="security-container">
      <h3>ЁЯФТ р╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в</h3>

      {/* р╕Яр╕нр╕гр╣Мр╕бр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е */}
      <form className="security-form" onSubmit={(e) => { e.preventDefault(); handleEntry(); }}>
        <input type="text" placeholder="ЁЯСд р╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е" value={personName} onChange={(e) => setPersonName(e.target.value)} />
        <input type="text" placeholder="ЁЯЖФ р╣Ар╕ер╕Вр╕Ър╕▒р╕Хр╕гр╕Ыр╕гр╕░р╕Кр╕▓р╕Кр╕Щ" value={idNumber} onChange={(e) => setIdNumber(e.target.value)} />
        <input type="text" placeholder="ЁЯЪЧ р╕вр╕▓р╕Щр╕Юр╕▓р╕лр╕Щр╕░ (р╕Цр╣Йр╕▓р╕бр╕╡)" value={vehicle} onChange={(e) => setVehicle(e.target.value)} />
        <select value={entryType} onChange={(e) => setEntryType(e.target.value)}>
          <option value="р╣Ар╕Вр╣Йр╕▓">ЁЯЪк р╣Ар╕Вр╣Йр╕▓</option>
          <option value="р╕нр╕нр╕Б">ЁЯЪк р╕нр╕нр╕Б</option>
        </select>
        <textarea placeholder="ЁЯУЭ р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б" value={entryDetails} onChange={(e) => setEntryDetails(e.target.value)} />
        <button type="submit" disabled={loading}>{loading ? "тП│ р╕Бр╕│р╕ер╕▒р╕Зр╕Ър╕▒р╕Щр╕Чр╕╢р╕Б..." : editEntry ? "ЁЯТ╛ р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕е" : "ЁЯУе р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е"}</button>
      </form>

      {/* р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Ър╕▒р╕Щр╕Чр╕╢р╕Б */}
      <h3>ЁЯУМ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕нр╕нр╕Б</h3>
      {securityLogs.length > 0 ? (
        <table className="security-table">
          <thead>
            <tr><th>ЁЯУЕ р╕зр╕▒р╕Щр╕Чр╕╡р╣И-р╣Ар╕зр╕ер╕▓</th><th>ЁЯСд р╕Кр╕╖р╣Ир╕н</th><th>ЁЯЖФ р╣Ар╕ер╕Вр╕Ър╕▒р╕Хр╕г</th><th>ЁЯЪЧ р╕вр╕▓р╕Щр╕Юр╕▓р╕лр╕Щр╕░</th><th>ЁЯУЭ р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф</th><th>ЁЯЫая╕П р╕Ир╕▒р╕Фр╕Бр╕▓р╕г</th></tr>
          </thead>
          <tbody>
            {securityLogs.map((log) => (
              <tr key={log.id}><td>{new Date(log.timestamp).toLocaleString()}</td><td>{log.personName}</td><td>{log.idNumber}</td><td>{log.vehicle}</td><td>{log.entryDetails}</td><td><button className="delete-btn" onClick={() => removeEntry(log.id)}>ЁЯЧСя╕П р╕ер╕Ъ</button></td></tr>
            ))}
          </tbody>
        </table>
      ) : <p>тЭМ р╣Др╕бр╣Ир╕бр╕╡р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕нр╕нр╕Б</p>}
    </div>
  );
};

export default SecurityManagement;
